# Visual JVM을 사용할 때 JMX 설정과 JSTATD 설정

# 1. Tomcat setenv.sh
#!/bin/sh
#[1] TOMCAT V8에 최적화
DATE=`date +%Y%m%d%H%M%S`

#[2] TOMCAT Port & values
export JAVA_OPTS="$JAVA_OPTS -Dtomcat.port.shutdown=8005"
export JAVA_OPTS="$JAVA_OPTS -Dtomcat.port.http=8080"
export JAVA_OPTS="$JAVA_OPTS -Dtomcat.port.https=8443"
export JAVA_OPTS="$JAVA_OPTS -Dtomcat.port.ajp=8009"
export JAVA_OPTS="$JAVA_OPTS -DmaxThreads=300"
export JAVA_OPTS="$JAVA_OPTS -DminSpareThreads=50"
export JAVA_OPTS="$JAVA_OPTS -DacceptCount=10"
export JAVA_OPTS="$JAVA_OPTS -DmaxKeepAliveRequests=-1"
export JAVA_OPTS="$JAVA_OPTS -DconnectionTimeout=30000"
export JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true"

#[3] JMX monitoring
export JAVA_OPTS="$JAVA_OPTS -Djava.rmi.server.hostname=$JMX_TARGET_IP"
export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote=true"
#export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port=18888"       #server.xml을 이용한다.
#export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.rmi.port=18888"   #server.xml을 이용한다.
export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.ssl=false"
export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.authenticate=true"
export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.access.file=$CATALINA_BASE/conf/jmxremote.access"
export JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$CATALINA_BASE/conf/jmxremote.password"

#[4] Directory Setup #####
export SERVER_NAME=INSTANCE01
export JAVA_OPTS="$JAVA_OPTS -Dserver=INSTANCE01"
export CATALINA_HOME="/home/tomcat8"
export CATALINA_BASE="/home/INSTANCE01"
export JAVA_HOME="/home/jdk1.8.0_162"
export LOG_HOME=$CATALINA_BASE/logs
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CATALINA_HOME/lib
export SCOUTER_AGENT_DIR="/home/scouter/agent.java"

#[5] JVM Options : Memory
export JAVA_OPTS="$JAVA_OPTS -Xms10240m"
export JAVA_OPTS="$JAVA_OPTS -Xmx10240m"
export JAVA_OPTS="$JAVA_OPTS -XX:MaxMetaspaceSize=512m -XX:MetaspaceSize=256m"

# require TOMCAT7 
#export JAVA_OPTS="$JAVA_OPTS -XX:PermSize=256m"
#export JAVA_OPTS="$JAVA_OPTS -XX:MaxPermSize=256m"
#export JAVA_OPTS="$JAVA_OPTS -Xss256k" #Thread Stack Size를 지정한다. 

#[6] Parallel GC OPTIONS ###
export JAVA_OPTS="$JAVA_OPTS -XX:+UseParallelOldGC "

#[7] JVM Option GCi log, Stack Trace, Dump
export JAVA_OPTS="$JAVA_OPTS -verbose:gc"
export JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCTimeStamps"
export JAVA_OPTS="$JAVA_OPTS -XX:+PrintGCDetails "
export JAVA_OPTS="$JAVA_OPTS -Xloggc:$LOG_HOME/gclog/gc_$DATE.log"
export JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError"
export JAVA_OPTS="$JAVA_OPTS -XX:HeapDumpPath=$LOG_HOME/gclog/java_pid.hprof"
export JAVA_OPTS="$JAVA_OPTS -XX:+DisableExplicitGC"
export CATALINA_OPTS="$CATALINA_OPTS -Djava.security.egd=file:/dev/./urandom"

#[8] Scouter
export JAVA_OPTS="${JAVA_OPTS} -javaagent:${SCOUTER_AGENT_DIR}/scouter.agent.jar"
export JAVA_OPTS="${JAVA_OPTS} -Dscouter.config=${SCOUTER_AGENT_DIR}/conf/INSTANCE01.conf"
export JAVA_OPTS="${JAVA_OPTS} -Dobj_name=INSTANCE01"


# 2. server.xml
# server.xml 상단에 아래 rmi 설정 추가
<Listener className="org.apache.catalina.mbeans.JmxRemoteLifecycleListener" rmiRegistryPortPlatform="18888" rmiServerPortPlatform="18888"/>

=============================================================================================================================================

# 3.jstatd 설정
# $JAVA_HOME/bin/jstatd.all.policy  생성
# vi jstatd.all.policy
grant codebase "file:${java.home}/../lib/tools.jar" {
   permission java.security.AllPermission;
};
# 4. rmiregistry, jstatd 백그라운드 실행(가비지 컬렉터 모니터링)
# rmiregistry 2020&
# jstatd -J-Djava.security.policy=jstatd.all.policy -p 2020&
# jstatd -J-Djava.security.policy=jstatd.all.policy -J-Djava.rmi.server.hostname=$TARGET_IP -p 2020
